import{_ as a,o as e,c as l,Q as n,k as s,a as o}from"./chunks/framework.587a850c.js";const x=JSON.parse('{"title":"⚕️ git flow 的使用","description":"⚕️ git flow 的使用","frontmatter":{"sticky":202309121603,"description":"⚕️ git flow 的使用","title":"⚕️ git flow 的使用","publish":true,"descriptionHTML":" <span style=\\"color:var(--description-font-color);\\">快速了解 git flow 的使用</span> <pre style=\\"background-color: #292b30; padding: 15px; border-radius: 10px;\\" class=\\"shiki material-theme-palenight\\"> <code> <span class=\\"line\\"> <span style=\\"color:#FFCB6B;\\">git</span> <span style=\\"color:#A6ACCD;\\"></span> <span style=\\"color:#C3E88D;\\">checkout</span> <span style=\\"color:#A6ACCD;\\"></span> <span style=\\"color:#00a6ed;\\">-b feature/userManage</span> </span><br/> <span class=\\"line\\" style=\\"margin-left: 8px\\"> <span style=\\"color:#FFCB6B;\\">git</span> <span style=\\"color:#A6ACCD;\\"></span> <span style=\\"color:#C3E88D;\\">checkout</span> <span style=\\"color:#A6ACCD;\\"></span> <span style=\\"color:#00a6ed;\\">-b hotfix/userBug-0.1</span> </span><br/> <span class=\\"line\\" style=\\"margin-left: 8px\\"> <span style=\\"color:#FFCB6B;\\">git</span> <span style=\\"color:#A6ACCD;\\"></span> <span style=\\"color:#C3E88D;\\">merge</span> <span style=\\"color:#A6ACCD;\\"></span> <span style=\\"color:#00a6ed;\\">release --no-ff</span> </span><br/> <span class=\\"line\\" style=\\"margin-left: 8px\\"> <span style=\\"color:#FFCB6B;\\">git</span> <span style=\\"color:#A6ACCD;\\"></span> <span style=\\"color:#C3E88D;\\">tag</span> <span style=\\"color:#A6ACCD;\\"></span> <span style=\\"color:#00a6ed;\\">-a v0.1 -m 部署包版本名</span> </span> </code> </pre> ","tag":["GIT"],"top":1,"sidebar":false},"headers":[],"relativePath":"sop/git/gitflow.md","filePath":"sop/git/gitflow.md","lastUpdated":1696866188000}'),p={name:"sop/git/gitflow.md"},t=n(`<h1 id="git-flow-了解与使用" tabindex="-1">Git flow 了解与使用 <a class="header-anchor" href="#git-flow-了解与使用" aria-label="Permalink to &quot;Git flow 了解与使用&quot;">​</a></h1><h2 id="_1-什么是-git-flow" tabindex="-1">1. 什么是 Git flow <a class="header-anchor" href="#_1-什么是-git-flow" aria-label="Permalink to &quot;1. 什么是 Git flow&quot;">​</a></h2><p>gitflow 是 git 的一种工作流程规范,由 Vincent Driessen 最先提出来,目的是为了解决分支和 commit 杂乱无章的问题,在实际开发过程中,若多名程序员开发同一个项目时很容易造成代码混乱甚至代码丢失的情况,而合理的运用 gitflow 规范可以很好地解决这个问题.如果你的公司很重视代码 review,那么 gitflow 更是你的不二之选.</p><h2 id="_2-git-flow-的工作流程" tabindex="-1">2. Git flow 的工作流程 <a class="header-anchor" href="#_2-git-flow-的工作流程" aria-label="Permalink to &quot;2. Git flow 的工作流程&quot;">​</a></h2><blockquote><p>git flow 常会用到下面五种分支：</p></blockquote><ul><li><h3 id="master-分支" tabindex="-1">Master 分支 <a class="header-anchor" href="#master-分支" aria-label="Permalink to &quot;Master 分支&quot;">​</a></h3></li></ul><p>这个分支只能从其他分支合并，不能在这个分支直接修改。</p><p>发布到 Release 的代码测试无误，可以合并过来。发布之后出现的问题，解决完之后可以合并过来。</p><p>master 分支的代码要设置提交权限，尽量不要将 master 的提交权限扩散。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">master</span><span style="color:#E1E4E8;">)$: git merge release --no-ff          </span><span style="color:#6A737D;"># 把release测试好的代码合并到master，运维人员操作</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">master</span><span style="color:#E1E4E8;">)$: git tag -a v0.1 -m </span><span style="color:#9ECBFF;">&#39;部署包版本名&#39;</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;"># 给版本命名，打Tag</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">master</span><span style="color:#24292E;">)$: git merge release --no-ff          </span><span style="color:#6A737D;"># 把release测试好的代码合并到master，运维人员操作</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">master</span><span style="color:#24292E;">)$: git tag -a v0.1 -m </span><span style="color:#032F62;">&#39;部署包版本名&#39;</span><span style="color:#24292E;">    </span><span style="color:#6A737D;"># 给版本命名，打Tag</span></span></code></pre></div><ul><li><h3 id="develop-分支" tabindex="-1">Develop 分支 <a class="header-anchor" href="#develop-分支" aria-label="Permalink to &quot;Develop 分支&quot;">​</a></h3></li></ul><p>这个分支是开发人员的主开发分支，包含所有要发布到下一个 Release 的代码，接到新需求和任务的时候，要从 develop 分支拉取代码。</p><p>一般情况 develop 的代码来源主要有两个：</p><p><strong>第一</strong>：进行需求开发，结束之后，将 feature 分支的代码合并过来</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">develop</span><span style="color:#E1E4E8;">)$: git checkout -b feature/userManage           </span><span style="color:#6A737D;"># 从develop建立特性分支</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">feature/userManage</span><span style="color:#E1E4E8;">)$: coding...                         </span><span style="color:#6A737D;"># 开发</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">feature/userManage</span><span style="color:#E1E4E8;">)$: git add xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">feature/userManage</span><span style="color:#E1E4E8;">)$: git commit -m </span><span style="color:#9ECBFF;">&#39;feat: 增加了用户管理功能&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">develop</span><span style="color:#E1E4E8;">)$: git merge feature/userManage --no-ff         </span><span style="color:#6A737D;"># 把特性分支合并到develop</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">develop</span><span style="color:#24292E;">)$: git checkout -b feature/userManage           </span><span style="color:#6A737D;"># 从develop建立特性分支</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">feature/userManage</span><span style="color:#24292E;">)$: coding...                         </span><span style="color:#6A737D;"># 开发</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">feature/userManage</span><span style="color:#24292E;">)$: git add xxx</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">feature/userManage</span><span style="color:#24292E;">)$: git commit -m </span><span style="color:#032F62;">&#39;feat: 增加了用户管理功能&#39;</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">develop</span><span style="color:#24292E;">)$: git merge feature/userManage --no-ff         </span><span style="color:#6A737D;"># 把特性分支合并到develop</span></span></code></pre></div><p><strong>第二</strong>：将 hotfix 处理好的 bug 合并过来</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">develop</span><span style="color:#E1E4E8;">)$: git merge hotfix/v0.1.1 --no-ff              </span><span style="color:#6A737D;"># 把hotfix分支合并到develop，同步代码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">develop</span><span style="color:#24292E;">)$: git merge hotfix/v0.1.1 --no-ff              </span><span style="color:#6A737D;"># 把hotfix分支合并到develop，同步代码</span></span></code></pre></div><ul><li><h3 id="feature-分支" tabindex="-1">Feature 分支 <a class="header-anchor" href="#feature-分支" aria-label="Permalink to &quot;Feature 分支&quot;">​</a></h3></li><li><p>开发新功能时，以 develop 为基础创建 feature 分支</p></li><li><p>分支命名: feature/ 开头的为特性分支， 命名规则: feature/user_module、 feature/cart_module</p></li></ul><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">develop</span><span style="color:#E1E4E8;">)$: git checkout -b feature/userManage           </span><span style="color:#6A737D;"># 从develop建立特性分支</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">feature/userManage</span><span style="color:#E1E4E8;">)$: coding...                         </span><span style="color:#6A737D;"># 开发</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">feature/userManage</span><span style="color:#E1E4E8;">)$: git add xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">feature/userManage</span><span style="color:#E1E4E8;">)$: git commit -m </span><span style="color:#9ECBFF;">&#39;feat: 增加了用户管理功能&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">develop</span><span style="color:#E1E4E8;">)$: git merge feature/userManage --no-ff         </span><span style="color:#6A737D;"># 把特性分支合并到develop</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">develop</span><span style="color:#24292E;">)$: git checkout -b feature/userManage           </span><span style="color:#6A737D;"># 从develop建立特性分支</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">feature/userManage</span><span style="color:#24292E;">)$: coding...                         </span><span style="color:#6A737D;"># 开发</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">feature/userManage</span><span style="color:#24292E;">)$: git add xxx</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">feature/userManage</span><span style="color:#24292E;">)$: git commit -m </span><span style="color:#032F62;">&#39;feat: 增加了用户管理功能&#39;</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">develop</span><span style="color:#24292E;">)$: git merge feature/userManage --no-ff         </span><span style="color:#6A737D;"># 把特性分支合并到develop</span></span></code></pre></div><ul><li><h3 id="release-分支" tabindex="-1">Release 分支 <a class="header-anchor" href="#release-分支" aria-label="Permalink to &quot;Release 分支&quot;">​</a></h3></li></ul><p>该分支又叫<strong>预发布分支</strong>，它是指发布正式版本之前（即合并到 Master 分支之前），我们可能需要有一个预发布的版本进行测试。</p><p>预发布分支是从 Develop 分支上面分出来的，预发布结束以后，必须合并进 Develop 和 Master 分支。它的命名，可以采用 release/v0.2 的形式。</p><ol><li>当有一组 feature 开发完成，首先会合并到 develop 分支，进入提测时，会创建 release 分支。</li><li>如果测试过程中若存在 bug 需要修复，则直接由<strong>开发者在 release 分支修复并提交</strong>。</li><li>当测试完成之后，合并 release 分支到 master 和 develop 分支，此时 master 为最新代码，用作上线。</li></ol><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">develop</span><span style="color:#E1E4E8;">)$: git checkout -b release/v0.1.0              </span><span style="color:#6A737D;"># 把hotfix分支合并到develop，同步代码</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">master</span><span style="color:#E1E4E8;">)$:  git merge release/v0.1.0 --no-ff			</span><span style="color:#6A737D;"># 将release的代码合并到master分支</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">master</span><span style="color:#E1E4E8;">)$: git tag -a v0.1 -m </span><span style="color:#9ECBFF;">&#39;部署包版本名&#39;</span><span style="color:#E1E4E8;">				</span><span style="color:#6A737D;"># 打一个新的tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">develop</span><span style="color:#E1E4E8;">)$:  git merge release/v0.1.0 --no-ff			</span><span style="color:#6A737D;"># 将release的代码合并到develop分支</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">develop</span><span style="color:#24292E;">)$: git checkout -b release/v0.1.0              </span><span style="color:#6A737D;"># 把hotfix分支合并到develop，同步代码</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">master</span><span style="color:#24292E;">)$:  git merge release/v0.1.0 --no-ff			</span><span style="color:#6A737D;"># 将release的代码合并到master分支</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">master</span><span style="color:#24292E;">)$: git tag -a v0.1 -m </span><span style="color:#032F62;">&#39;部署包版本名&#39;</span><span style="color:#24292E;">				</span><span style="color:#6A737D;"># 打一个新的tag</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">develop</span><span style="color:#24292E;">)$:  git merge release/v0.1.0 --no-ff			</span><span style="color:#6A737D;"># 将release的代码合并到develop分支</span></span></code></pre></div><ul><li><h3 id="hotfix-分支" tabindex="-1">Hotfix 分支 <a class="header-anchor" href="#hotfix-分支" aria-label="Permalink to &quot;Hotfix 分支&quot;">​</a></h3></li></ul><p>这个分支主要目的是线上 bug 修改，小功能的修改。发布之后有 bug，需要尽快修复不可能去等下一个版本迭代再去修改，这时候我们的 hotfix 分支就派上用场了。</p><p>hotfix 主要流程如下：</p><ul><li>切换到 master 分支，创建一个 hotfix 分支，如 hotfix/v0.1.1</li><li>在该分支处理 bug，然后提交</li><li>切换至 master 分支，将 hotfix 的代码合并过来</li><li>切换至 develop 分支，将 hotfix 的代码合并过来</li></ul><blockquote><p><strong>命名规则</strong>：在当前 release 版本号后面写小版本号。</p><p>例如: 当前的 release 分支为 v0.2，则 hotfix 分支名为 v0.2.1，下个 hotfix 分支名为 v0.2.2。</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">master</span><span style="color:#E1E4E8;">)$: git checkout -b hotfix/v0.1.1              </span><span style="color:#6A737D;"># 从master建立hotfix分支</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">hotfix/v0.1.1</span><span style="color:#E1E4E8;">)$: bcoding...                          </span><span style="color:#6A737D;"># 开发</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">hotfix/v0.1.1</span><span style="color:#E1E4E8;">)$: git add xxx</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">hotfix/v0.1.1</span><span style="color:#E1E4E8;">)$: git commit -m </span><span style="color:#9ECBFF;">&#39;fix: 处理了xxxbug&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">master</span><span style="color:#E1E4E8;">)$:  git merge hotfix/v0.1.1  --no-ff          </span><span style="color:#6A737D;"># 把hotfix分支合并到master，并上线到生产环境</span></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">develop</span><span style="color:#E1E4E8;">)$: git merge hotfix/v0.1.1  --no-ff          </span><span style="color:#6A737D;"># 把hotfix分支合并到dev，同步代码</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">master</span><span style="color:#24292E;">)$: git checkout -b hotfix/v0.1.1              </span><span style="color:#6A737D;"># 从master建立hotfix分支</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">hotfix/v0.1.1</span><span style="color:#24292E;">)$: bcoding...                          </span><span style="color:#6A737D;"># 开发</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">hotfix/v0.1.1</span><span style="color:#24292E;">)$: git add xxx</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">hotfix/v0.1.1</span><span style="color:#24292E;">)$: git commit -m </span><span style="color:#032F62;">&#39;fix: 处理了xxxbug&#39;</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">master</span><span style="color:#24292E;">)$:  git merge hotfix/v0.1.1  --no-ff          </span><span style="color:#6A737D;"># 把hotfix分支合并到master，并上线到生产环境</span></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">develop</span><span style="color:#24292E;">)$: git merge hotfix/v0.1.1  --no-ff          </span><span style="color:#6A737D;"># 把hotfix分支合并到dev，同步代码</span></span></code></pre></div><p><span style="color:red;">建议: feature、release、hotfix 分支的代码合并到 master develop 后要及时删除。</span></p><h2 id="_3-git-flow-工作流程图" tabindex="-1">3. git flow 工作流程图 <a class="header-anchor" href="#_3-git-flow-工作流程图" aria-label="Permalink to &quot;3. git flow 工作流程图&quot;">​</a></h2>`,32),r=s("iframe",{id:"embed_dom",name:"embed_dom",frameborder:"0",style:{width:"800px",height:"500px"},src:"https://www.processon.com/embed/6520118cca74b14bc107227b"},null,-1),c=s("h2",{id:"_4-官方的流程图",tabindex:"-1"},[o("4. 官方的流程图 "),s("a",{class:"header-anchor",href:"#_4-官方的流程图","aria-label":'Permalink to "4. 官方的流程图"'},"​")],-1),i=s("div",{style:{width:"800px",height:"800px",border:"1px #333 solid"}},[s("img",{src:"https://jeffkreeftmeijer.com/git-flow/git-flow.png",style:{"max-height":"100%"}})],-1),y=[t,r,c,i];function d(E,g,h,f,u,m){return e(),l("div",null,y)}const b=a(p,[["render",d]]);export{x as __pageData,b as default};
